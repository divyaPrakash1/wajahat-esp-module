import { User } from "./user";
import { CheckPoint } from "./checkpoint";
import { AllowedAction } from "./allowed-action";
import { Comment } from "./comment";
import { Tag } from "./tag";
import { Attachment } from "./attachment";
import { Tactic } from "./tactic";
import { Effort } from "./effort";
import { History } from "./history";
import { from } from "rxjs";
export class Activity {
  sharedStats: any;
  constructor() {}
  id!: number;
  tacticTitle!: string;
  description!: string;
  condition!: string;
  targetValue!: number;
  actualValue!: number;
  createdBy_UserId!: number;
  score!: number;
  dueDate!: string;
  DueDate!:string;
  effortInHour!: number;
  effortInMinute!: number;
  unit!: string;
  parentBoardId!: number;
  parentBoardName!: string;
  status!: number;
  createdBy!: User;
  reminder!: number;
  checkPoint?: CheckPoint;
  checkPointId!: number;
  tacticId!: number;
  tactic?: Tactic;
  progressStatus!: string;
  progressStatusColor!: string;
  commentCount!: number;
  allowedActions!: any;
  isCascading!: boolean;
  labelGroupId!: number;
  cascadeTacticParentName!: string;
  owner_UserId!: number;
  userOwner?: User;
  fieldCount!: number;
  attachmentCount!: number;
  isSigned!: boolean;
  assignedBy_UserId!: number;
  assignedBy?: User;
  relationCount!: number;
  isLocked!: boolean;
  isFollowed!: boolean;
  isImportant!: boolean;
  isAccepted!: boolean;
  isApproved!: boolean;
  completedDate!: string;
  creationDate!: string;
  note!: any;
  tags!: Tag[];
  attachments!: Attachment[];
  respAttachments?:any[];
  comments!: Comment[];
  efforts!: Effort[];
  respEfforts?:any[];
  history!: History[];
  completedDateAsDate!: Date;
  closeComment?: string;
  effortSum!: number;
  logComment?: string;
  comment?: string;
  weight!: number;
  startDate!: Date;
  appType!: number;
  tacticLabelText?: string;
  tacticsLabelText?: string;
  oppProActivityType?: string;
  oppProScheduleEndDate?: string;
  oppProScheduleStartDate?: string;
  oppProStatus?: string;
  isReassigned!: boolean;
  activityType!: string;
  isShared!:boolean;
  maxClaims!:number;
  totalClaims!:number;
  sharedWithUsers!:{id	:number,
  name:string,
  position:string,
  profilePictureUrl:string,
  hasClaimed:boolean}[];
  requestId!:number;
  requestNumber!:number;
  requestName!:string;
  sharedWithUsersClaimed?:any[];
  sharedWithUsersNotClaimed?:any[];
  isPlanned?:boolean;
  reassignReason?:string;
  isClaimed?:boolean;
  isClaimedByloggedIn?:boolean;
  isSharedByloggedIn?:boolean;
  epmInfo?:any;
  UserOwner:any;
}
